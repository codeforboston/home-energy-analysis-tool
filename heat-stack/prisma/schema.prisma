// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  notes       Note[]
  roles       Role[]
  sessions    Session[]
  connections Connection[]
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id          String  @id @default(cuid())
  altText     String?
  contentType String
  blob        Bytes

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Home {
  id         String @id @default(cuid())
  name       String
  address    String
  livingArea Float
  Case       Case[]
  File       File[]
}

model Case {
  id                              String @id @default(cuid())
  home                            Home @relation(fields: [homeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  summaryOutput                   SummaryOutput[] // There can be only one summaryOutput, but attempting anything else yielded an error.
  homeId                          String
  summaryOutputId                 String @unique
  fuelType                        String
  designTemperatureOverride       Boolean
  heatingSystemEfficiency         Int
  thermostatSetPoint              Int
  setbackTemperature              Int
  setbackHoursPerDay              Int
  numberOfOccupants               Int
  estimatedWaterHeatingEfficiency Int
  standByLosses                   Int
  File                            File[]
  BillingPeriod                   BillingPeriod[]
}

model File {
  id          String @id @default(cuid())
  home        Home @relation(fields: [homeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  case        Case @relation(fields: [caseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  homeId      String
  caseId      String
  filePath    String
  description String
}

model BillingPeriod {
  id                            String @id @default(cuid())
  case                          Case @relation(fields: [caseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  caseId                        String
  periodStartDate               DateTime
  periodEndDate                 DateTime
  usage                         Float
  analysisTypeOverride          Boolean
  inclusionOverride             Boolean
  originalAnalysisType          Int
  analysisType                  Int 
  defaultInclusionByCalculation Boolean
  eliminatedAsOutlier           Boolean
  wholeHomeHeatLossRate         Float
}

model SummaryOutput {
    // TODO: implement one to one for Case and Summary.  
    // Below is giving an error
    id                              String @id @default(cuid())
    case                            Case @relation(fields: [caseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
    caseId                          String @unique
    estimatedBalancePoint           Float
    otherFuelUsage                  Float 
    averageIndoorTemperature        Float
    differenceBetweenTiAndTbp       Float
    designTemperature               Float
    wholeHomeHeatLossRate           Float
    standardDeviationOfHeatLossRate Float
    averageHeatLoad                 Float
    maximumHeatLoad                 Float
}

