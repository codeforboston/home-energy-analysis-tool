// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["typedSql"]
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id       String  @id @default(cuid())
  // caseUser added when CaseUser model added for HEAT schema
  caseUser CaseUser[]
  email    String  @unique
  username String  @unique
  name     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  image       UserImage?
  password    Password?
  notes       Note[]
  roles       Role[]
  sessions    Session[]
  connections Connection[]
  passkey     Passkey[]
}

model Note {
  id      String @id @default(cuid())
  title   String
  content String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  ownerId String

  images NoteImage[]

  // non-unique foreign key
  @@index([ownerId])
  // This helps our order by in the user search a LOT
  @@index([ownerId, updatedAt])
}

model NoteImage {
  id        String  @id @default(cuid())
  altText   String?
  objectKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  note   Note   @relation(fields: [noteId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  noteId String

  // non-unique foreign key
  @@index([noteId])
}

model UserImage {
  id        String  @id @default(cuid())
  altText   String?
  objectKey String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Password {
  hash String

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String @unique
}

model Session {
  id             String   @id @default(cuid())
  expirationDate DateTime

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  // non-unique foreign key
  @@index([userId])
}

model Permission {
  id          String @id @default(cuid())
  action      String // e.g. create, read, update, delete
  entity      String // e.g. note, user, etc.
  access      String // e.g. own or any
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  roles Role[]

  @@unique([action, entity, access])
}

model Role {
  id          String @id @default(cuid())
  name        String @unique
  description String @default("")

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  users       User[]
  permissions Permission[]
}

model Verification {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  /// The type of verification, e.g. "email" or "phone"
  type String

  /// The thing we're trying to verify, e.g. a user's email or phone number
  target String

  /// The secret key used to generate the otp
  secret String

  /// The algorithm used to generate the otp
  algorithm String

  /// The number of digits in the otp
  digits Int

  /// The number of seconds the otp is valid for
  period Int

  /// The valid characters for the otp
  charSet String

  /// When it's safe to delete this verification
  expiresAt DateTime?

  @@unique([target, type])
}

model Connection {
  id           String @id @default(cuid())
  providerName String
  providerId   String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String

  @@unique([providerName, providerId])
}

model Passkey {
  id             String   @id
  aaguid         String
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  publicKey      Bytes
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId         String
  webauthnUserId String
  counter        BigInt
  deviceType     String // 'singleDevice' or 'multiDevice'
  backedUp       Boolean
  transports     String? // Stored as comma-separated values

  @@index(userId)
}
// HEAT schema starts here
model Analysis {
  id                   Int @id @default(autoincrement())
  case                 Case @relation(fields: [caseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  caseId               Int
  heatingInput         HeatingInput[]
  analysisDataFile     AnalysisDataFile[]
  heatingOutput        HeatingOutput[]
  rules_engine_version String
}

model HeatingInput {
  id                              Int @id @default(autoincrement())
  analysis                        Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  analysisId                      Int
  caseUser                        CaseUser[]
  fuelType                        String
  designTemperatureOverride       Boolean
  heatingSystemEfficiency         Int
  thermostatSetPoint              Int
  setbackTemperature              Int
  setbackHoursPerDay              Int
  numberOfOccupants               Int
  estimatedWaterHeatingEfficiency Int
  standByLosses                   Int
  processedEnergyBill             ProcessedEnergyBill[]
  livingArea                      Float
}

model ProcessedEnergyBill {
  id                     Int @id @default(autoincrement())
  AnalysisInput          HeatingInput @relation(fields: [analysisInputId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  analysisInputId        Int
  periodStartDate        DateTime
  periodEndDate          DateTime
  usageTherms            Float
  wholeHomeHeatLossRate  Float
  analysisType           Int
  defaultInclusion       Boolean
  invertDefaultInclusion Boolean
}

model HeatingOutput {
  id                              Int @id @default(autoincrement())
  analysis                        Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  analysisId                      Int
  estimatedBalancePoint           Float
  otherFuelUsage                  Float 
  averageIndoorTemperature        Float
  differenceBetweenTiAndTbp       Float
  designTemperature               Float
  wholeHomeHeatLossRate           Float
  standardDeviationOfHeatLossRate Float
  averageHeatLoad                 Float
  maximumHeatLoad                 Float
}

model EnergyUsageFile {
  id                    Int @id @default(autoincrement())
  provider              String
  fuelType              String
  precedingDeliveryDate DateTime
  content               String
  description           String
  analysisDataFile      AnalysisDataFile[]
}

model AnalysisDataFile {
  analysis         Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  analysisId       Int
  EnergyUsageFile  EnergyUsageFile @relation(fields: [energyUsageFileId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  energyUsageFileId Int
  @@unique([analysisId, energyUsageFileId])
}

model Case {
  id          Int @id @default(autoincrement())
  homeOwner   HomeOwner @relation(fields: [homeOwnerId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  homeOwnerId Int
  location    Location @relation(fields: [locationId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  locationId  Int
  analysis    Analysis[]
}

model HomeOwner {
  id          Int @id @default(autoincrement())
  case        Case[]
  firstName1  String
  lastName1   String
  email1      String
  firstName2  String
  lastName2   String
  email2      String
}

model Location {
  id                   Int @id @default(autoincrement())
  case                 Case[]
  address              String
  city                 String
  state                String
  zipcode              String
  country              String
  livingAreaSquareFeet Int
  latitude             Float
  longitude            Float
}

model CaseUser {
  case            HeatingInput @relation(fields: [analysisId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  user            User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  analysisId      Int @id @default(autoincrement())
  userId          String
  @@unique([analysisId, userId])
}