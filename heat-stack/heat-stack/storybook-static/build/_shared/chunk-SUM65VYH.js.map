{
  "version": 3,
  "sources": ["../../../app/components/error-boundary.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/components/error-boundary.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/components/error-boundary.tsx\");\n  import.meta.hot.lastModified = \"1706218436648.8835\";\n}\n// REMIX HMR END\n\nimport { isRouteErrorResponse, useParams, useRouteError } from '@remix-run/react';\nimport { captureRemixErrorBoundaryError } from '@sentry/remix';\nimport { getErrorMessage } from '#app/utils/misc.tsx';\nexport function GeneralErrorBoundary({\n  defaultStatusHandler = ({\n    error\n  }) => <p>\n\t\t\t{error.status} {error.data}\n\t\t</p>,\n  statusHandlers,\n  unexpectedErrorHandler = error => <p>{getErrorMessage(error)}</p>\n}) {\n  _s();\n  const error = useRouteError();\n  captureRemixErrorBoundaryError(error);\n  const params = useParams();\n  if (typeof document !== 'undefined') {\n    console.error(error);\n  }\n  return <div className=\"container flex items-center justify-center p-20 text-h2\">\n\t\t\t{isRouteErrorResponse(error) ? (statusHandlers?.[error.status] ?? defaultStatusHandler)({\n      error,\n      params\n    }) : unexpectedErrorHandler(error)}\n\t\t</div>;\n}\n_s(GeneralErrorBoundary, \"6EFrFbtadsJk9+AfSjNnBBmTVkA=\", false, function () {\n  return [useRouteError, useParams];\n});\n_c = GeneralErrorBoundary;\nvar _c;\n$RefreshReg$(_c, \"GeneralErrorBoundary\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;AA2BQ;AA1BR,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,wCAA0C,EAAE;AAAA,EACrF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAmC;AACnC,cAAY,IAAI,eAAe;AACjC;AAMO,SAAS,qBAAqB;AAAA,EACnC,uBAAuB,CAAC;AAAA,IACtB;AAAA,EACF,MAAM,mDAAC,OACL;AAAA,UAAM;AAAA,IAAO;AAAA,IAAE,MAAM;AAAA,OADjB;AAAA;AAAA;AAAA;AAAA,SAEN;AAAA,EACA;AAAA,EACA,yBAAyB,WAAS,mDAAC,OAAG,0BAAgB,KAAK,KAAzB;AAAA;AAAA;AAAA;AAAA,SAA2B;AAC/D,GAAG;AACD,KAAG;AACH,QAAM,QAAQ,cAAc;AAC5B,iCAA+B,KAAK;AACpC,QAAM,SAAS,UAAU;AACzB,MAAI,OAAO,aAAa,aAAa;AACnC,YAAQ,MAAM,KAAK;AAAA,EACrB;AACA,SAAO,mDAAC,SAAI,WAAU,2DACpB,+BAAqB,KAAK,KAAK,iBAAiB,MAAM,MAAM,KAAK,sBAAsB;AAAA,IACrF;AAAA,IACA;AAAA,EACF,CAAC,IAAI,uBAAuB,KAAK,KAJ5B;AAAA;AAAA;AAAA;AAAA,SAKP;AACF;AACA,GAAG,sBAAsB,gCAAgC,OAAO,WAAY;AAC1E,SAAO,CAAC,eAAe,SAAS;AAClC,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,sBAAsB;AAEvC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
