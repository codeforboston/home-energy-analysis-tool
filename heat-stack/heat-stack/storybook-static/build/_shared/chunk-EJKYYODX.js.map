{
  "version": 3,
  "sources": ["../../../app/utils/user-validation.ts"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/utils/user-validation.ts\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/utils/user-validation.ts\");\n  import.meta.hot.lastModified = \"1706218436656.8838\";\n}\n// REMIX HMR END\n\nimport { z } from 'zod';\nexport const UsernameSchema = z.string({\n  required_error: 'Username is required'\n}).min(3, {\n  message: 'Username is too short'\n}).max(20, {\n  message: 'Username is too long'\n}).regex(/^[a-zA-Z0-9_]+$/, {\n  message: 'Username can only include letters, numbers, and underscores'\n})\n// users can type the username in any case, but we store it in lowercase\n.transform(_c = value => value.toLowerCase());\n_c2 = UsernameSchema;\nexport const PasswordSchema = z.string({\n  required_error: 'Password is required'\n}).min(6, {\n  message: 'Password is too short'\n}).max(100, {\n  message: 'Password is too long'\n});\nexport const NameSchema = z.string({\n  required_error: 'Name is required'\n}).min(3, {\n  message: 'Name is too short'\n}).max(40, {\n  message: 'Name is too long'\n});\nexport const EmailSchema = z.string({\n  required_error: 'Email is required'\n}).email({\n  message: 'Email is invalid'\n}).min(3, {\n  message: 'Email is too short'\n}).max(100, {\n  message: 'Email is too long'\n})\n// users can type the email in any case, but we store it in lowercase\n.transform(_c3 = value => value.toLowerCase());\n_c4 = EmailSchema;\nexport const PasswordAndConfirmPasswordSchema = z.object({\n  password: PasswordSchema,\n  confirmPassword: PasswordSchema\n}).superRefine(_c5 = ({\n  confirmPassword,\n  password\n}, ctx) => {\n  if (confirmPassword !== password) {\n    ctx.addIssue({\n      path: ['confirmPassword'],\n      code: 'custom',\n      message: 'The passwords must match'\n    });\n  }\n});\n_c6 = PasswordAndConfirmPasswordSchema;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"UsernameSchema$z\\n\\t.string({ required_error: 'Username is required' })\\n\\t.min(3, { message: 'Username is too short' })\\n\\t.max(20, { message: 'Username is too long' })\\n\\t.regex(/^[a-zA-Z0-9_]+$/, {\\n\\t\\tmessage: 'Username can only include letters, numbers, and underscores',\\n\\t})\\n\\t// users can type the username in any case, but we store it in lowercase\\n\\t.transform\");\n$RefreshReg$(_c2, \"UsernameSchema\");\n$RefreshReg$(_c3, \"EmailSchema$z\\n\\t.string({ required_error: 'Email is required' })\\n\\t.email({ message: 'Email is invalid' })\\n\\t.min(3, { message: 'Email is too short' })\\n\\t.max(100, { message: 'Email is too long' })\\n\\t// users can type the email in any case, but we store it in lowercase\\n\\t.transform\");\n$RefreshReg$(_c4, \"EmailSchema\");\n$RefreshReg$(_c5, \"PasswordAndConfirmPasswordSchema$z\\n\\t.object({ password: PasswordSchema, confirmPassword: PasswordSchema })\\n\\t.superRefine\");\n$RefreshReg$(_c6, \"PasswordAndConfirmPasswordSchema\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;AACA,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,mCAAqC,EAAE;AAAA,EAChF;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAON,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA8B;AAC9B,cAAY,IAAI,eAAe;AACjC;AAIO,IAAM,iBAAiB,EAAE,OAAO;AAAA,EACrC,gBAAgB;AAClB,CAAC,EAAE,IAAI,GAAG;AAAA,EACR,SAAS;AACX,CAAC,EAAE,IAAI,IAAI;AAAA,EACT,SAAS;AACX,CAAC,EAAE,MAAM,mBAAmB;AAAA,EAC1B,SAAS;AACX,CAAC,EAEA,UAAU,KAAK,WAAS,MAAM,YAAY,CAAC;AAC5C,MAAM;AACC,IAAM,iBAAiB,EAAE,OAAO;AAAA,EACrC,gBAAgB;AAClB,CAAC,EAAE,IAAI,GAAG;AAAA,EACR,SAAS;AACX,CAAC,EAAE,IAAI,KAAK;AAAA,EACV,SAAS;AACX,CAAC;AACM,IAAM,aAAa,EAAE,OAAO;AAAA,EACjC,gBAAgB;AAClB,CAAC,EAAE,IAAI,GAAG;AAAA,EACR,SAAS;AACX,CAAC,EAAE,IAAI,IAAI;AAAA,EACT,SAAS;AACX,CAAC;AACM,IAAM,cAAc,EAAE,OAAO;AAAA,EAClC,gBAAgB;AAClB,CAAC,EAAE,MAAM;AAAA,EACP,SAAS;AACX,CAAC,EAAE,IAAI,GAAG;AAAA,EACR,SAAS;AACX,CAAC,EAAE,IAAI,KAAK;AAAA,EACV,SAAS;AACX,CAAC,EAEA,UAAU,MAAM,WAAS,MAAM,YAAY,CAAC;AAC7C,MAAM;AACC,IAAM,mCAAmC,EAAE,OAAO;AAAA,EACvD,UAAU;AAAA,EACV,iBAAiB;AACnB,CAAC,EAAE,YAAY,MAAM,CAAC;AAAA,EACpB;AAAA,EACA;AACF,GAAG,QAAQ;AACT,MAAI,oBAAoB,UAAU;AAChC,QAAI,SAAS;AAAA,MACX,MAAM,CAAC,iBAAiB;AAAA,MACxB,MAAM;AAAA,MACN,SAAS;AAAA,IACX,CAAC;AAAA,EACH;AACF,CAAC;AACD,MAAM;AACN,IAAI;AAAJ,IAAQ;AAAR,IAAa;AAAb,IAAkB;AAAlB,IAAuB;AAAvB,IAA4B;AAC5B,aAAa,IAAI,8WAAuX;AACxY,aAAa,KAAK,gBAAgB;AAClC,aAAa,KAAK,4RAAkS;AACpT,aAAa,KAAK,aAAa;AAC/B,aAAa,KAAK,4HAA8H;AAChJ,aAAa,KAAK,kCAAkC;AAEpD,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
