{
  "version": 3,
  "sources": ["../../../../app/routes/settings+/profile.index.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/settings+/profile.index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$(),\n  _s3 = $RefreshSig$(),\n  _s4 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/settings+/profile.index.tsx\");\n  import.meta.hot.lastModified = \"1706218436656.8838\";\n}\n// REMIX HMR END\n\nimport { conform, useForm } from '@conform-to/react';\nimport { getFieldsetConstraint, parse } from '@conform-to/zod';\nimport { json } from '@remix-run/node';\nimport { Link, useFetcher, useLoaderData } from '@remix-run/react';\nimport { AuthenticityTokenInput } from 'remix-utils/csrf/react';\nimport { z } from 'zod';\nimport { ErrorList, Field } from '#app/components/forms.tsx';\nimport { Button } from '#app/components/ui/button.tsx';\nimport { Icon } from '#app/components/ui/icon.tsx';\nimport { StatusButton } from '#app/components/ui/status-button.tsx';\nimport { requireUserId, sessionKey } from '#app/utils/auth.server.ts';\nimport { validateCSRF } from '#app/utils/csrf.server.ts';\nimport { prisma } from '#app/utils/db.server.ts';\nimport { getUserImgSrc, invariantResponse, useDoubleCheck } from '#app/utils/misc.tsx';\nimport { authSessionStorage } from '#app/utils/session.server.ts';\nimport { redirectWithToast } from '#app/utils/toast.server.ts';\nimport { NameSchema, UsernameSchema } from '#app/utils/user-validation.ts';\nimport { twoFAVerificationType } from './profile.two-factor.tsx';\nexport const handle = {\n  getSitemapEntries: () => null\n};\nconst ProfileFormSchema = z.object({\n  name: NameSchema.optional(),\n  username: UsernameSchema\n});\nexport async function loader({\n  request\n}) {\n  const userId = await requireUserId(request);\n  const user = await prisma.user.findUniqueOrThrow({\n    where: {\n      id: userId\n    },\n    select: {\n      id: true,\n      name: true,\n      username: true,\n      email: true,\n      image: {\n        select: {\n          id: true\n        }\n      },\n      _count: {\n        select: {\n          sessions: {\n            where: {\n              expirationDate: {\n                gt: new Date()\n              }\n            }\n          }\n        }\n      }\n    }\n  });\n  const twoFactorVerification = await prisma.verification.findUnique({\n    select: {\n      id: true\n    },\n    where: {\n      target_type: {\n        type: twoFAVerificationType,\n        target: userId\n      }\n    }\n  });\n  const password = await prisma.password.findUnique({\n    select: {\n      userId: true\n    },\n    where: {\n      userId\n    }\n  });\n  return json({\n    user,\n    hasPassword: Boolean(password),\n    isTwoFactorEnabled: Boolean(twoFactorVerification)\n  });\n}\nconst profileUpdateActionIntent = 'update-profile';\nconst signOutOfSessionsActionIntent = 'sign-out-of-sessions';\nconst deleteDataActionIntent = 'delete-data';\nexport async function action({\n  request\n}) {\n  const userId = await requireUserId(request);\n  const formData = await request.formData();\n  await validateCSRF(formData, request.headers);\n  const intent = formData.get('intent');\n  switch (intent) {\n    case profileUpdateActionIntent:\n      {\n        return profileUpdateAction({\n          request,\n          userId,\n          formData\n        });\n      }\n    case signOutOfSessionsActionIntent:\n      {\n        return signOutOfSessionsAction({\n          request,\n          userId,\n          formData\n        });\n      }\n    case deleteDataActionIntent:\n      {\n        return deleteDataAction({\n          request,\n          userId,\n          formData\n        });\n      }\n    default:\n      {\n        throw new Response(`Invalid intent \"${intent}\"`, {\n          status: 400\n        });\n      }\n  }\n}\nexport default function EditUserProfile() {\n  _s();\n  const data = useLoaderData();\n  return <div className=\"flex flex-col gap-12\">\n\t\t\t<div className=\"flex justify-center\">\n\t\t\t\t<div className=\"relative h-52 w-52\">\n\t\t\t\t\t<img src={getUserImgSrc(data.user.image?.id)} alt={data.user.username} className=\"h-full w-full rounded-full object-cover\" />\n\t\t\t\t\t<Button asChild variant=\"outline\" className=\"absolute -right-3 top-3 flex h-10 w-10 items-center justify-center rounded-full p-0\">\n\t\t\t\t\t\t<Link preventScrollReset to=\"photo\" title=\"Change profile photo\" aria-label=\"Change profile photo\">\n\t\t\t\t\t\t\t<Icon name=\"camera\" className=\"h-4 w-4\" />\n\t\t\t\t\t\t</Link>\n\t\t\t\t\t</Button>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t\t<UpdateProfile />\n\n\t\t\t<div className=\"col-span-6 my-6 h-1 border-b-[1.5px] border-foreground\" />\n\t\t\t<div className=\"col-span-full flex flex-col gap-6\">\n\t\t\t\t<div>\n\t\t\t\t\t<Link to=\"change-email\">\n\t\t\t\t\t\t<Icon name=\"envelope-closed\">\n\t\t\t\t\t\t\tChange email from {data.user.email}\n\t\t\t\t\t\t</Icon>\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Link to=\"two-factor\">\n\t\t\t\t\t\t{data.isTwoFactorEnabled ? <Icon name=\"lock-closed\">2FA is enabled</Icon> : <Icon name=\"lock-open-1\">Enable 2FA</Icon>}\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Link to={data.hasPassword ? 'password' : 'password/create'}>\n\t\t\t\t\t\t<Icon name=\"dots-horizontal\">\n\t\t\t\t\t\t\t{data.hasPassword ? 'Change Password' : 'Create a Password'}\n\t\t\t\t\t\t</Icon>\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Link to=\"connections\">\n\t\t\t\t\t\t<Icon name=\"link-2\">Manage connections</Icon>\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<div>\n\t\t\t\t\t<Link reloadDocument download=\"my-epic-notes-data.json\" to=\"/resources/download-user-data\">\n\t\t\t\t\t\t<Icon name=\"download\">Download your data</Icon>\n\t\t\t\t\t</Link>\n\t\t\t\t</div>\n\t\t\t\t<SignOutOfSessions />\n\t\t\t\t<DeleteData />\n\t\t\t</div>\n\t\t</div>;\n}\n_s(EditUserProfile, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = EditUserProfile;\nasync function profileUpdateAction({\n  userId,\n  formData\n}) {\n  const submission = await parse(formData, {\n    async: true,\n    schema: ProfileFormSchema.superRefine(async ({\n      username\n    }, ctx) => {\n      const existingUsername = await prisma.user.findUnique({\n        where: {\n          username\n        },\n        select: {\n          id: true\n        }\n      });\n      if (existingUsername && existingUsername.id !== userId) {\n        ctx.addIssue({\n          path: ['username'],\n          code: z.ZodIssueCode.custom,\n          message: 'A user already exists with this username'\n        });\n      }\n    })\n  });\n  if (submission.intent !== 'submit') {\n    return json({\n      status: 'idle',\n      submission\n    });\n  }\n  if (!submission.value) {\n    return json({\n      status: 'error',\n      submission\n    }, {\n      status: 400\n    });\n  }\n  const data = submission.value;\n  await prisma.user.update({\n    select: {\n      username: true\n    },\n    where: {\n      id: userId\n    },\n    data: {\n      name: data.name,\n      username: data.username\n    }\n  });\n  return json({\n    status: 'success',\n    submission\n  });\n}\nfunction UpdateProfile() {\n  _s2();\n  const data = useLoaderData();\n  const fetcher = useFetcher();\n  const [form, fields] = useForm({\n    id: 'edit-profile',\n    constraint: getFieldsetConstraint(ProfileFormSchema),\n    lastSubmission: fetcher.data?.submission,\n    onValidate({\n      formData\n    }) {\n      return parse(formData, {\n        schema: ProfileFormSchema\n      });\n    },\n    defaultValue: {\n      username: data.user.username,\n      name: data.user.name ?? '',\n      email: data.user.email\n    }\n  });\n  return <fetcher.Form method=\"POST\" {...form.props}>\n\t\t\t<AuthenticityTokenInput />\n\t\t\t<div className=\"grid grid-cols-6 gap-x-10\">\n\t\t\t\t<Field className=\"col-span-3\" labelProps={{\n        htmlFor: fields.username.id,\n        children: 'Username'\n      }} inputProps={conform.input(fields.username)} errors={fields.username.errors} />\n\t\t\t\t<Field className=\"col-span-3\" labelProps={{\n        htmlFor: fields.name.id,\n        children: 'Name'\n      }} inputProps={conform.input(fields.name)} errors={fields.name.errors} />\n\t\t\t</div>\n\n\t\t\t<ErrorList errors={form.errors} id={form.errorId} />\n\n\t\t\t<div className=\"mt-8 flex justify-center\">\n\t\t\t\t<StatusButton type=\"submit\" size=\"wide\" name=\"intent\" value={profileUpdateActionIntent} status={fetcher.state !== 'idle' ? 'pending' : fetcher.data?.status ?? 'idle'}>\n\t\t\t\t\tSave changes\n\t\t\t\t</StatusButton>\n\t\t\t</div>\n\t\t</fetcher.Form>;\n}\n_s2(UpdateProfile, \"UzvSjeKCTDMHQRJe2illLbG0AqY=\", false, function () {\n  return [useLoaderData, useFetcher, useForm];\n});\n_c2 = UpdateProfile;\nasync function signOutOfSessionsAction({\n  request,\n  userId\n}) {\n  const authSession = await authSessionStorage.getSession(request.headers.get('cookie'));\n  const sessionId = authSession.get(sessionKey);\n  invariantResponse(sessionId, 'You must be authenticated to sign out of other sessions');\n  await prisma.session.deleteMany({\n    where: {\n      userId,\n      id: {\n        not: sessionId\n      }\n    }\n  });\n  return json({\n    status: 'success'\n  });\n}\nfunction SignOutOfSessions() {\n  _s3();\n  const data = useLoaderData();\n  const dc = useDoubleCheck();\n  const fetcher = useFetcher();\n  const otherSessionsCount = data.user._count.sessions - 1;\n  return <div>\n\t\t\t{otherSessionsCount ? <fetcher.Form method=\"POST\">\n\t\t\t\t\t<AuthenticityTokenInput />\n\t\t\t\t\t<StatusButton {...dc.getButtonProps({\n        type: 'submit',\n        name: 'intent',\n        value: signOutOfSessionsActionIntent\n      })} variant={dc.doubleCheck ? 'destructive' : 'default'} status={fetcher.state !== 'idle' ? 'pending' : fetcher.data?.status ?? 'idle'}>\n\t\t\t\t\t\t<Icon name=\"avatar\">\n\t\t\t\t\t\t\t{dc.doubleCheck ? `Are you sure?` : `Sign out of ${otherSessionsCount} other sessions`}\n\t\t\t\t\t\t</Icon>\n\t\t\t\t\t</StatusButton>\n\t\t\t\t</fetcher.Form> : <Icon name=\"avatar\">This is your only session</Icon>}\n\t\t</div>;\n}\n_s3(SignOutOfSessions, \"vGqH5veF3P6z3W7E3D5vXZ17b98=\", false, function () {\n  return [useLoaderData, useDoubleCheck, useFetcher];\n});\n_c3 = SignOutOfSessions;\nasync function deleteDataAction({\n  userId\n}) {\n  await prisma.user.delete({\n    where: {\n      id: userId\n    }\n  });\n  return redirectWithToast('/', {\n    type: 'success',\n    title: 'Data Deleted',\n    description: 'All of your data has been deleted'\n  });\n}\nfunction DeleteData() {\n  _s4();\n  const dc = useDoubleCheck();\n  const fetcher = useFetcher();\n  return <div>\n\t\t\t<fetcher.Form method=\"POST\">\n\t\t\t\t<AuthenticityTokenInput />\n\t\t\t\t<StatusButton {...dc.getButtonProps({\n        type: 'submit',\n        name: 'intent',\n        value: deleteDataActionIntent\n      })} variant={dc.doubleCheck ? 'destructive' : 'default'} status={fetcher.state !== 'idle' ? 'pending' : 'idle'}>\n\t\t\t\t\t<Icon name=\"trash\">\n\t\t\t\t\t\t{dc.doubleCheck ? `Are you sure?` : `Delete all your data`}\n\t\t\t\t\t</Icon>\n\t\t\t\t</StatusButton>\n\t\t\t</fetcher.Form>\n\t\t</div>;\n}\n_s4(DeleteData, \"vnFydE1DKgFCQD1o3M4b69zjfoU=\", false, function () {\n  return [useDoubleCheck, useFetcher];\n});\n_c4 = DeleteData;\nvar _c, _c2, _c3, _c4;\n$RefreshReg$(_c, \"EditUserProfile\");\n$RefreshReg$(_c2, \"UpdateProfile\");\n$RefreshReg$(_c3, \"SignOutOfSessions\");\n$RefreshReg$(_c4, \"DeleteData\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
