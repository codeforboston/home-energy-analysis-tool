{
  "version": 3,
  "sources": ["../../../../app/routes/settings+/profile.two-factor.disable.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/settings+/profile.two-factor.disable.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/settings+/profile.two-factor.disable.tsx\");\n  import.meta.hot.lastModified = \"1706218436656.8838\";\n}\n// REMIX HMR END\n\nimport { json } from '@remix-run/node';\nimport { useFetcher } from '@remix-run/react';\nimport { AuthenticityTokenInput } from 'remix-utils/csrf/react';\nimport { Icon } from '#app/components/ui/icon.tsx';\nimport { StatusButton } from '#app/components/ui/status-button.tsx';\nimport { requireRecentVerification } from '#app/routes/_auth+/verify.tsx';\nimport { requireUserId } from '#app/utils/auth.server.ts';\nimport { validateCSRF } from '#app/utils/csrf.server.ts';\nimport { prisma } from '#app/utils/db.server.ts';\nimport { useDoubleCheck } from '#app/utils/misc.tsx';\nimport { redirectWithToast } from '#app/utils/toast.server.ts';\nimport { twoFAVerificationType } from './profile.two-factor.tsx';\nexport const handle = {\n  breadcrumb: <Icon name=\"lock-open-1\">Disable</Icon>,\n  getSitemapEntries: () => null\n};\nexport async function loader({\n  request\n}) {\n  await requireRecentVerification(request);\n  return json({});\n}\nexport async function action({\n  request\n}) {\n  await requireRecentVerification(request);\n  await validateCSRF(await request.formData(), request.headers);\n  const userId = await requireUserId(request);\n  await prisma.verification.delete({\n    where: {\n      target_type: {\n        target: userId,\n        type: twoFAVerificationType\n      }\n    }\n  });\n  return redirectWithToast('/settings/profile/two-factor', {\n    title: '2FA Disabled',\n    description: 'Two factor authentication has been disabled.'\n  });\n}\nexport default function TwoFactorDisableRoute() {\n  _s();\n  const disable2FAFetcher = useFetcher();\n  const dc = useDoubleCheck();\n  return <div className=\"mx-auto max-w-sm\">\n\t\t\t<disable2FAFetcher.Form method=\"POST\">\n\t\t\t\t<AuthenticityTokenInput />\n\t\t\t\t<p>\n\t\t\t\t\tDisabling two factor authentication is not recommended. However, if\n\t\t\t\t\tyou would like to do so, click here:\n\t\t\t\t</p>\n\t\t\t\t<StatusButton variant=\"destructive\" status={disable2FAFetcher.state === 'loading' ? 'pending' : 'idle'} {...dc.getButtonProps({\n        className: 'mx-auto',\n        name: 'intent',\n        value: 'disable',\n        type: 'submit'\n      })}>\n\t\t\t\t\t{dc.doubleCheck ? 'Are you sure?' : 'Disable 2FA'}\n\t\t\t\t</StatusButton>\n\t\t\t</disable2FAFetcher.Form>\n\t\t</div>;\n}\n_s(TwoFactorDisableRoute, \"AovRxqD2axCh0khrBhmC7lIcx4g=\", false, function () {\n  return [useFetcher, useDoubleCheck];\n});\n_c = TwoFactorDisableRoute;\nvar _c;\n$RefreshReg$(_c, \"TwoFactorDisableRoute\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAAqB;AAMrB,yBAA8B;AAC9B,yBAA6B;AAC7B,uBAAuB;AAEvB,0BAAkC;AAGpB;AAjCd,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,0DAA4D,EAAE;AAAA,EACvG;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAqD;AACrD,cAAY,IAAI,eAAe;AACjC;AAeO,IAAM,SAAS;AAAA,EACpB,YAAY,mDAAC,QAAK,MAAK,eAAc,uBAAzB;AAAA;AAAA;AAAA;AAAA,SAAgC;AAAA,EAC5C,mBAAmB,MAAM;AAC3B;AA0Be,SAAR,wBAAyC;AAC9C,KAAG;AACH,QAAM,oBAAoB,WAAW;AACrC,QAAM,KAAK,eAAe;AAC1B,SAAO,mDAAC,SAAI,WAAU,oBACrB,6DAAC,kBAAkB,MAAlB,EAAuB,QAAO,QAC9B;AAAA,uDAAC,4BAAD;AAAA;AAAA;AAAA;AAAA,WAAwB;AAAA,IACxB,mDAAC,OAAE,wHAAH;AAAA;AAAA;AAAA;AAAA,WAGA;AAAA,IACA,mDAAC,gBAAa,SAAQ,eAAc,QAAQ,kBAAkB,UAAU,YAAY,YAAY,QAAS,GAAG,GAAG,eAAe;AAAA,MAC1H,WAAW;AAAA,MACX,MAAM;AAAA,MACN,OAAO;AAAA,MACP,MAAM;AAAA,IACR,CAAC,GACD,aAAG,cAAc,kBAAkB,iBANrC;AAAA;AAAA;AAAA;AAAA,WAOA;AAAA,OAbD;AAAA;AAAA;AAAA;AAAA,SAcA,KAfM;AAAA;AAAA;AAAA;AAAA,SAgBP;AACF;AACA,GAAG,uBAAuB,gCAAgC,OAAO,WAAY;AAC3E,SAAO,CAAC,YAAY,cAAc;AACpC,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,uBAAuB;AAExC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
