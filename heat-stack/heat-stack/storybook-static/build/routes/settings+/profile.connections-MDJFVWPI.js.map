{
  "version": 3,
  "sources": ["empty-module:#app/utils/connections.server.ts", "empty-module:#app/utils/timing.server.ts", "../../../../app/routes/settings+/profile.connections.tsx"],
  "sourcesContent": ["module.exports = {};", "module.exports = {};", "// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/settings+/profile.connections.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/settings+/profile.connections.tsx\");\n  import.meta.hot.lastModified = \"1706218436656.8838\";\n}\n// REMIX HMR END\n\nimport { json } from '@remix-run/node';\nimport { useFetcher, useLoaderData } from '@remix-run/react';\nimport { useState } from 'react';\nimport { Icon } from '#app/components/ui/icon.tsx';\nimport { StatusButton } from '#app/components/ui/status-button.tsx';\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from '#app/components/ui/tooltip.tsx';\nimport { requireUserId } from '#app/utils/auth.server.ts';\nimport { resolveConnectionData } from '#app/utils/connections.server.ts';\nimport { ProviderConnectionForm, ProviderNameSchema, providerIcons, providerNames } from '#app/utils/connections.tsx';\nimport { prisma } from '#app/utils/db.server.ts';\nimport { invariantResponse } from '#app/utils/misc.tsx';\nimport { makeTimings } from '#app/utils/timing.server.ts';\nimport { createToastHeaders } from '#app/utils/toast.server.ts';\nexport const handle = {\n  breadcrumb: <Icon name=\"link-2\">Connections</Icon>,\n  getSitemapEntries: () => null\n};\nasync function userCanDeleteConnections(userId) {\n  const user = await prisma.user.findUnique({\n    select: {\n      password: {\n        select: {\n          userId: true\n        }\n      },\n      _count: {\n        select: {\n          connections: true\n        }\n      }\n    },\n    where: {\n      id: userId\n    }\n  });\n  // user can delete their connections if they have a password\n  if (user?.password) return true;\n  // users have to have more than one remaining connection to delete one\n  return Boolean(user?._count.connections && user?._count.connections > 1);\n}\nexport async function loader({\n  request\n}) {\n  const userId = await requireUserId(request);\n  const timings = makeTimings('profile connections loader');\n  const rawConnections = await prisma.connection.findMany({\n    select: {\n      id: true,\n      providerName: true,\n      providerId: true,\n      createdAt: true\n    },\n    where: {\n      userId\n    }\n  });\n  const connections = [];\n  for (const connection of rawConnections) {\n    const r = ProviderNameSchema.safeParse(connection.providerName);\n    if (!r.success) continue;\n    const providerName = r.data;\n    const connectionData = await resolveConnectionData(providerName, connection.providerId, {\n      timings\n    });\n    connections.push({\n      ...connectionData,\n      providerName,\n      id: connection.id,\n      createdAtFormatted: connection.createdAt.toLocaleString()\n    });\n  }\n  return json({\n    connections,\n    canDeleteConnections: await userCanDeleteConnections(userId)\n  }, {\n    headers: {\n      'Server-Timing': timings.toString()\n    }\n  });\n}\nexport const headers = ({\n  loaderHeaders\n}) => {\n  const headers = {\n    'Server-Timing': loaderHeaders.get('Server-Timing') ?? ''\n  };\n  return headers;\n};\nexport async function action({\n  request\n}) {\n  const userId = await requireUserId(request);\n  const formData = await request.formData();\n  invariantResponse(formData.get('intent') === 'delete-connection', 'Invalid intent');\n  invariantResponse(await userCanDeleteConnections(userId), 'You cannot delete your last connection unless you have a password.');\n  const connectionId = formData.get('connectionId');\n  invariantResponse(typeof connectionId === 'string', 'Invalid connectionId');\n  await prisma.connection.delete({\n    where: {\n      id: connectionId,\n      userId: userId\n    }\n  });\n  const toastHeaders = await createToastHeaders({\n    title: 'Deleted',\n    description: 'Your connection has been deleted.'\n  });\n  return json({\n    status: 'success'\n  }, {\n    headers: toastHeaders\n  });\n}\nexport default function Connections() {\n  _s();\n  const data = useLoaderData();\n  return <div className=\"mx-auto max-w-md\">\n\t\t\t{data.connections.length ? <div className=\"flex flex-col gap-2\">\n\t\t\t\t\t<p>Here are your current connections:</p>\n\t\t\t\t\t<ul className=\"flex flex-col gap-4\">\n\t\t\t\t\t\t{data.connections.map(c => <li key={c.id}>\n\t\t\t\t\t\t\t\t<Connection connection={c} canDelete={data.canDeleteConnections} />\n\t\t\t\t\t\t\t</li>)}\n\t\t\t\t\t</ul>\n\t\t\t\t</div> : <p>You don't have any connections yet.</p>}\n\t\t\t<div className=\"mt-5 flex flex-col gap-5 border-b-2 border-t-2 border-border py-3\">\n\t\t\t\t{providerNames.map(providerName => <ProviderConnectionForm key={providerName} type=\"Connect\" providerName={providerName} />)}\n\t\t\t</div>\n\t\t</div>;\n}\n_s(Connections, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = Connections;\nfunction Connection({\n  connection,\n  canDelete\n}) {\n  _s2();\n  const deleteFetcher = useFetcher();\n  const [infoOpen, setInfoOpen] = useState(false);\n  const icon = providerIcons[connection.providerName];\n  return <div className=\"flex justify-between gap-2\">\n\t\t\t<span className={`inline-flex items-center gap-1.5`}>\n\t\t\t\t{icon}\n\t\t\t\t<span>\n\t\t\t\t\t{connection.link ? <a href={connection.link} className=\"underline\">\n\t\t\t\t\t\t\t{connection.displayName}\n\t\t\t\t\t\t</a> : connection.displayName}{' '}\n\t\t\t\t\t({connection.createdAtFormatted})\n\t\t\t\t</span>\n\t\t\t</span>\n\t\t\t{canDelete ? <deleteFetcher.Form method=\"POST\">\n\t\t\t\t\t<input name=\"connectionId\" value={connection.id} type=\"hidden\" />\n\t\t\t\t\t<TooltipProvider>\n\t\t\t\t\t\t<Tooltip>\n\t\t\t\t\t\t\t<TooltipTrigger asChild>\n\t\t\t\t\t\t\t\t<StatusButton name=\"intent\" value=\"delete-connection\" variant=\"destructive\" size=\"sm\" status={deleteFetcher.state !== 'idle' ? 'pending' : deleteFetcher.data?.status ?? 'idle'}>\n\t\t\t\t\t\t\t\t\t<Icon name=\"cross-1\" />\n\t\t\t\t\t\t\t\t</StatusButton>\n\t\t\t\t\t\t\t</TooltipTrigger>\n\t\t\t\t\t\t\t<TooltipContent>Disconnect this account</TooltipContent>\n\t\t\t\t\t\t</Tooltip>\n\t\t\t\t\t</TooltipProvider>\n\t\t\t\t</deleteFetcher.Form> : <TooltipProvider>\n\t\t\t\t\t<Tooltip open={infoOpen} onOpenChange={setInfoOpen}>\n\t\t\t\t\t\t<TooltipTrigger onClick={() => setInfoOpen(true)}>\n\t\t\t\t\t\t\t<Icon name=\"question-mark-circled\"></Icon>\n\t\t\t\t\t\t</TooltipTrigger>\n\t\t\t\t\t\t<TooltipContent>\n\t\t\t\t\t\t\tYou cannot delete your last connection unless you have a password.\n\t\t\t\t\t\t</TooltipContent>\n\t\t\t\t\t</Tooltip>\n\t\t\t\t</TooltipProvider>}\n\t\t</div>;\n}\n_s2(Connection, \"k2jEgCF0d5m8xX8ShNqKItt8Qeg=\", false, function () {\n  return [useFetcher];\n});\n_c2 = Connection;\nvar _c, _c2;\n$RefreshReg$(_c, \"Connections\");\n$RefreshReg$(_c2, \"Connection\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA,WAAO,UAAU,CAAC;AAAA;AAAA;;;ACAlB;AAAA;AAAA,WAAO,UAAU,CAAC;AAAA;AAAA;;;ACsBlB,kBAAqB;AAErB,IAAAA,gBAAyB;AAIzB,yBAA8B;AAC9B,gCAAsC;AAEtC,uBAAuB;AAEvB,2BAA4B;AAC5B,0BAAmC;AAErB;AAnCd,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,mDAAqD,EAAE;AAAA,EAChG;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAAtB,IACE,MAAM,aAAa;AAErB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA8C;AAC9C,cAAY,IAAI,eAAe;AACjC;AAgBO,IAAM,SAAS;AAAA,EACpB,YAAY,mDAAC,QAAK,MAAK,UAAS,2BAApB;AAAA;AAAA;AAAA;AAAA,SAA+B;AAAA,EAC3C,mBAAmB,MAAM;AAC3B;AAiGe,SAAR,cAA+B;AACpC,KAAG;AACH,QAAM,OAAO,cAAc;AAC3B,SAAO,mDAAC,SAAI,WAAU,oBACpB;AAAA,SAAK,YAAY,SAAS,mDAAC,SAAI,WAAU,uBACxC;AAAA,yDAAC,OAAE,kDAAH;AAAA;AAAA;AAAA;AAAA,aAAqC;AAAA,MACrC,mDAAC,QAAG,WAAU,uBACZ,eAAK,YAAY,IAAI,OAAK,mDAAC,QAC1B,6DAAC,cAAW,YAAY,GAAG,WAAW,KAAK,wBAA3C;AAAA;AAAA;AAAA;AAAA,aAAiE,KAD/B,EAAE,IAAX;AAAA;AAAA;AAAA;AAAA,aAE1B,CAAK,KAHP;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,SANyB;AAAA;AAAA;AAAA;AAAA,WAO1B,IAAS,mDAAC,OAAE,mDAAH;AAAA;AAAA;AAAA;AAAA,WAAsC;AAAA,IAChD,mDAAC,SAAI,WAAU,qEACb,wBAAc,IAAI,kBAAgB,mDAAC,0BAA0C,MAAK,WAAU,gBAA7B,cAA7B;AAAA;AAAA;AAAA;AAAA,WAAsF,CAAE,KAD5H;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,OAXM;AAAA;AAAA;AAAA;AAAA,SAYP;AACF;AACA,GAAG,aAAa,gCAAgC,OAAO,WAAY;AACjE,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,SAAS,WAAW;AAAA,EAClB;AAAA,EACA;AACF,GAAG;AACD,MAAI;AACJ,QAAM,gBAAgB,WAAW;AACjC,QAAM,CAAC,UAAU,WAAW,QAAI,wBAAS,KAAK;AAC9C,QAAM,OAAO,cAAc,WAAW,YAAY;AAClD,SAAO,mDAAC,SAAI,WAAU,8BACrB;AAAA,uDAAC,UAAK,WAAW,oCACf;AAAA;AAAA,MACD,mDAAC,UACC;AAAA,mBAAW,OAAO,mDAAC,OAAE,MAAM,WAAW,MAAM,WAAU,aACpD,qBAAW,eADK;AAAA;AAAA;AAAA;AAAA,eAElB,IAAO,WAAW;AAAA,QAAa;AAAA,QAAI;AAAA,QAClC,WAAW;AAAA,QAAmB;AAAA,WAJjC;AAAA;AAAA;AAAA;AAAA,aAKA;AAAA,SAPD;AAAA;AAAA;AAAA;AAAA,WAQA;AAAA,IACC,YAAY,mDAAC,cAAc,MAAd,EAAmB,QAAO,QACtC;AAAA,yDAAC,WAAM,MAAK,gBAAe,OAAO,WAAW,IAAI,MAAK,YAAtD;AAAA;AAAA;AAAA;AAAA,aAA+D;AAAA,MAC/D,mDAAC,mBACA,6DAAC,WACA;AAAA,2DAAC,kBAAe,SAAO,MACtB,6DAAC,gBAAa,MAAK,UAAS,OAAM,qBAAoB,SAAQ,eAAc,MAAK,MAAK,QAAQ,cAAc,UAAU,SAAS,YAAY,cAAc,MAAM,UAAU,QACxK,6DAAC,QAAK,MAAK,aAAX;AAAA;AAAA;AAAA;AAAA,eAAqB,KADtB;AAAA;AAAA;AAAA;AAAA,eAEA,KAHD;AAAA;AAAA;AAAA;AAAA,eAIA;AAAA,QACA,mDAAC,kBAAe,uCAAhB;AAAA;AAAA;AAAA;AAAA,eAAuC;AAAA,WANxC;AAAA;AAAA;AAAA;AAAA,aAOA,KARD;AAAA;AAAA;AAAA;AAAA,aASA;AAAA,SAXW;AAAA;AAAA;AAAA;AAAA,WAYZ,IAAwB,mDAAC,mBACxB,6DAAC,WAAQ,MAAM,UAAU,cAAc,aACtC;AAAA,yDAAC,kBAAe,SAAS,MAAM,YAAY,IAAI,GAC9C,6DAAC,QAAK,MAAK,2BAAX;AAAA;AAAA;AAAA;AAAA,aAAmC,KADpC;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MACA,mDAAC,kBAAe,kFAAhB;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAND;AAAA;AAAA;AAAA;AAAA,WAOA,KARuB;AAAA;AAAA;AAAA;AAAA,WASxB;AAAA,OA/BK;AAAA;AAAA;AAAA;AAAA,SAgCP;AACF;AACA,IAAI,YAAY,gCAAgC,OAAO,WAAY;AACjE,SAAO,CAAC,UAAU;AACpB,CAAC;AACD,MAAM;AACN,IAAI;AAAJ,IAAQ;AACR,aAAa,IAAI,aAAa;AAC9B,aAAa,KAAK,YAAY;AAE9B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": ["import_react"]
}
