{
  "version": 3,
  "sources": ["../../../../app/routes/settings+/profile.two-factor.index.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/settings+/profile.two-factor.index.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/settings+/profile.two-factor.index.tsx\");\n  import.meta.hot.lastModified = \"1706218436656.8838\";\n}\n// REMIX HMR END\n\nimport { json, redirect } from '@remix-run/node';\nimport { Link, useFetcher, useLoaderData } from '@remix-run/react';\nimport { AuthenticityTokenInput } from 'remix-utils/csrf/react';\nimport { Icon } from '#app/components/ui/icon.tsx';\nimport { StatusButton } from '#app/components/ui/status-button.tsx';\nimport { requireUserId } from '#app/utils/auth.server.ts';\nimport { validateCSRF } from '#app/utils/csrf.server.ts';\nimport { prisma } from '#app/utils/db.server.ts';\nimport { generateTOTP } from '#app/utils/totp.server.ts';\nimport { twoFAVerificationType } from './profile.two-factor.tsx';\nimport { twoFAVerifyVerificationType } from './profile.two-factor.verify.tsx';\nexport const handle = {\n  getSitemapEntries: () => null\n};\nexport async function loader({\n  request\n}) {\n  const userId = await requireUserId(request);\n  const verification = await prisma.verification.findUnique({\n    where: {\n      target_type: {\n        type: twoFAVerificationType,\n        target: userId\n      }\n    },\n    select: {\n      id: true\n    }\n  });\n  return json({\n    is2FAEnabled: Boolean(verification)\n  });\n}\nexport async function action({\n  request\n}) {\n  const userId = await requireUserId(request);\n  await validateCSRF(await request.formData(), request.headers);\n  const {\n    otp: _otp,\n    ...config\n  } = generateTOTP();\n  const verificationData = {\n    ...config,\n    type: twoFAVerifyVerificationType,\n    target: userId\n  };\n  await prisma.verification.upsert({\n    where: {\n      target_type: {\n        target: userId,\n        type: twoFAVerifyVerificationType\n      }\n    },\n    create: verificationData,\n    update: verificationData\n  });\n  return redirect('/settings/profile/two-factor/verify');\n}\nexport default function TwoFactorRoute() {\n  _s();\n  const data = useLoaderData();\n  const enable2FAFetcher = useFetcher();\n  return <div className=\"flex flex-col gap-4\">\n\t\t\t{data.is2FAEnabled ? <>\n\t\t\t\t\t<p className=\"text-lg\">\n\t\t\t\t\t\t<Icon name=\"check\">\n\t\t\t\t\t\t\tYou have enabled two-factor authentication.\n\t\t\t\t\t\t</Icon>\n\t\t\t\t\t</p>\n\t\t\t\t\t<Link to=\"disable\">\n\t\t\t\t\t\t<Icon name=\"lock-open-1\">Disable 2FA</Icon>\n\t\t\t\t\t</Link>\n\t\t\t\t</> : <>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<Icon name=\"lock-open-1\">\n\t\t\t\t\t\t\tYou have not enabled two-factor authentication yet.\n\t\t\t\t\t\t</Icon>\n\t\t\t\t\t</p>\n\t\t\t\t\t<p className=\"text-sm\">\n\t\t\t\t\t\tTwo factor authentication adds an extra layer of security to your\n\t\t\t\t\t\taccount. You will need to enter a code from an authenticator app\n\t\t\t\t\t\tlike{' '}\n\t\t\t\t\t\t<a className=\"underline\" href=\"https://1password.com/\">\n\t\t\t\t\t\t\t1Password\n\t\t\t\t\t\t</a>{' '}\n\t\t\t\t\t\tto log in.\n\t\t\t\t\t</p>\n\t\t\t\t\t<enable2FAFetcher.Form method=\"POST\">\n\t\t\t\t\t\t<AuthenticityTokenInput />\n\t\t\t\t\t\t<StatusButton type=\"submit\" name=\"intent\" value=\"enable\" status={enable2FAFetcher.state === 'loading' ? 'pending' : 'idle'} className=\"mx-auto\">\n\t\t\t\t\t\t\tEnable 2FA\n\t\t\t\t\t\t</StatusButton>\n\t\t\t\t\t</enable2FAFetcher.Form>\n\t\t\t\t</>}\n\t\t</div>;\n}\n_s(TwoFactorRoute, \"yAxupoGoWsK4f/JRcCn9FOORomA=\", false, function () {\n  return [useLoaderData, useFetcher];\n});\n_c = TwoFactorRoute;\nvar _c;\n$RefreshReg$(_c, \"TwoFactorRoute\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAA+B;AAK/B,yBAA8B;AAC9B,yBAA6B;AAC7B,uBAAuB;AACvB,yBAA6B;AAwDL;AApFxB,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,wDAA0D,EAAE;AAAA,EACrG;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAmD;AACnD,cAAY,IAAI,eAAe;AACjC;AAcO,IAAM,SAAS;AAAA,EACpB,mBAAmB,MAAM;AAC3B;AA8Ce,SAAR,iBAAkC;AACvC,KAAG;AACH,QAAM,OAAO,cAAc;AAC3B,QAAM,mBAAmB,WAAW;AACpC,SAAO,mDAAC,SAAI,WAAU,uBACpB,eAAK,eAAe,sFACnB;AAAA,uDAAC,OAAE,WAAU,WACZ,6DAAC,QAAK,MAAK,SAAQ,2DAAnB;AAAA;AAAA;AAAA;AAAA,WAEA,KAHD;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,IACA,mDAAC,QAAK,IAAG,WACR,6DAAC,QAAK,MAAK,eAAc,2BAAzB;AAAA;AAAA;AAAA;AAAA,WAAoC,KADrC;AAAA;AAAA;AAAA;AAAA,WAEA;AAAA,OARmB;AAAA;AAAA;AAAA;AAAA,SASpB,IAAM,sFACL;AAAA,uDAAC,OACA,6DAAC,QAAK,MAAK,eAAc,mEAAzB;AAAA;AAAA;AAAA;AAAA,WAEA,KAHD;AAAA;AAAA;AAAA;AAAA,WAIA;AAAA,IACA,mDAAC,OAAE,WAAU,WAAU;AAAA;AAAA,MAGjB;AAAA,MACL,mDAAC,OAAE,WAAU,aAAY,MAAK,0BAAyB,yBAAvD;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,MAAK;AAAA,MAAI;AAAA,SANV;AAAA;AAAA;AAAA;AAAA,WAQA;AAAA,IACA,mDAAC,iBAAiB,MAAjB,EAAsB,QAAO,QAC7B;AAAA,yDAAC,4BAAD;AAAA;AAAA;AAAA;AAAA,aAAwB;AAAA,MACxB,mDAAC,gBAAa,MAAK,UAAS,MAAK,UAAS,OAAM,UAAS,QAAQ,iBAAiB,UAAU,YAAY,YAAY,QAAQ,WAAU,WAAU,0BAAhJ;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAJD;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,OApBK;AAAA;AAAA;AAAA;AAAA,SAqBN,KA/BK;AAAA;AAAA;AAAA;AAAA,SAgCP;AACF;AACA,GAAG,gBAAgB,gCAAgC,OAAO,WAAY;AACpE,SAAO,CAAC,eAAe,UAAU;AACnC,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,gBAAgB;AAEjC,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
