{
  "version": 3,
  "sources": ["../../../../../app/routes/users+/$username_+/notes.$noteId_.edit.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/users+/$username_+/notes.$noteId_.edit.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/users+/$username_+/notes.$noteId_.edit.tsx\");\n  import.meta.hot.lastModified = \"1706218436656.8838\";\n}\n// REMIX HMR END\n\nimport { json } from '@remix-run/node';\nimport { useLoaderData } from '@remix-run/react';\nimport { requireUserId } from '#app/utils/auth.server.ts';\nimport { prisma } from '#app/utils/db.server.ts';\nimport { invariantResponse } from '#app/utils/misc.tsx';\nimport { NoteEditor, action } from './__note-editor.tsx';\nexport { action };\nexport async function loader({\n  params,\n  request\n}) {\n  const userId = await requireUserId(request);\n  const note = await prisma.note.findFirst({\n    select: {\n      id: true,\n      title: true,\n      content: true,\n      images: {\n        select: {\n          id: true,\n          altText: true\n        }\n      }\n    },\n    where: {\n      id: params.noteId,\n      ownerId: userId\n    }\n  });\n  invariantResponse(note, 'Not found', {\n    status: 404\n  });\n  return json({\n    note: note\n  });\n}\nexport default function NoteEdit() {\n  _s();\n  const data = useLoaderData();\n  return <NoteEditor note={data.note} />;\n}\n_s(NoteEdit, \"5thj+e1edPyRpKif1JmVRC6KArE=\", false, function () {\n  return [useLoaderData];\n});\n_c = NoteEdit;\nvar _c;\n$RefreshReg$(_c, \"NoteEdit\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqBA,kBAAqB;AAErB,yBAA8B;AAC9B,uBAAuB;AAoCd;AA3DT,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,4DAA8D,EAAE;AAAA,EACzG;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAAuD;AACvD,cAAY,IAAI,eAAe;AACjC;AAuCe,SAAR,WAA4B;AACjC,KAAG;AACH,QAAM,OAAO,cAAc;AAC3B,SAAO,mDAAC,cAAW,MAAM,KAAK,QAAvB;AAAA;AAAA;AAAA;AAAA,SAA6B;AACtC;AACA,GAAG,UAAU,gCAAgC,OAAO,WAAY;AAC9D,SAAO,CAAC,aAAa;AACvB,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,UAAU;AAE3B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
