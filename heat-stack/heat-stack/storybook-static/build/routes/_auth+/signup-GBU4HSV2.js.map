{
  "version": 3,
  "sources": ["../../../../app/routes/_auth+/signup.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_auth+/signup.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_auth+/signup.tsx\");\n  import.meta.hot.lastModified = \"1706218436648.8835\";\n}\n// REMIX HMR END\n\nimport { conform, useForm } from '@conform-to/react';\nimport { getFieldsetConstraint, parse } from '@conform-to/zod';\nimport * as E from '@react-email/components';\nimport { json, redirect } from '@remix-run/node';\nimport { Form, useActionData, useSearchParams } from '@remix-run/react';\nimport { AuthenticityTokenInput } from 'remix-utils/csrf/react';\nimport { HoneypotInputs } from 'remix-utils/honeypot/react';\nimport { z } from 'zod';\nimport { GeneralErrorBoundary } from '#app/components/error-boundary.tsx';\nimport { ErrorList, Field } from '#app/components/forms.tsx';\nimport { StatusButton } from '#app/components/ui/status-button.tsx';\nimport { ProviderConnectionForm, providerNames } from '#app/utils/connections.tsx';\nimport { validateCSRF } from '#app/utils/csrf.server.ts';\nimport { prisma } from '#app/utils/db.server.ts';\nimport { sendEmail } from '#app/utils/email.server.ts';\nimport { checkHoneypot } from '#app/utils/honeypot.server.ts';\nimport { useIsPending } from '#app/utils/misc.tsx';\nimport { EmailSchema } from '#app/utils/user-validation.ts';\nimport { prepareVerification } from './verify.tsx';\nconst SignupSchema = z.object({\n  email: EmailSchema\n});\nexport async function action({\n  request\n}) {\n  const formData = await request.formData();\n  await validateCSRF(formData, request.headers);\n  checkHoneypot(formData);\n  const submission = await parse(formData, {\n    schema: SignupSchema.superRefine(async (data, ctx) => {\n      const existingUser = await prisma.user.findUnique({\n        where: {\n          email: data.email\n        },\n        select: {\n          id: true\n        }\n      });\n      if (existingUser) {\n        ctx.addIssue({\n          path: ['email'],\n          code: z.ZodIssueCode.custom,\n          message: 'A user already exists with this email'\n        });\n        return;\n      }\n    }),\n    async: true\n  });\n  if (submission.intent !== 'submit') {\n    return json({\n      status: 'idle',\n      submission\n    });\n  }\n  if (!submission.value) {\n    return json({\n      status: 'error',\n      submission\n    }, {\n      status: 400\n    });\n  }\n  const {\n    email\n  } = submission.value;\n  const {\n    verifyUrl,\n    redirectTo,\n    otp\n  } = await prepareVerification({\n    period: 10 * 60,\n    request,\n    type: 'onboarding',\n    target: email\n  });\n  const response = await sendEmail({\n    to: email,\n    subject: `Welcome to Epic Notes!`,\n    react: <SignupEmail onboardingUrl={verifyUrl.toString()} otp={otp} />\n  });\n  if (response.status === 'success') {\n    return redirect(redirectTo.toString());\n  } else {\n    submission.error[''] = [response.error.message];\n    return json({\n      status: 'error',\n      submission\n    }, {\n      status: 500\n    });\n  }\n}\nexport function SignupEmail({\n  onboardingUrl,\n  otp\n}) {\n  return <E.Html lang=\"en\" dir=\"ltr\">\n\t\t\t<E.Container>\n\t\t\t\t<h1>\n\t\t\t\t\t<E.Text>Welcome to Epic Notes!</E.Text>\n\t\t\t\t</h1>\n\t\t\t\t<p>\n\t\t\t\t\t<E.Text>\n\t\t\t\t\t\tHere's your verification code: <strong>{otp}</strong>\n\t\t\t\t\t</E.Text>\n\t\t\t\t</p>\n\t\t\t\t<p>\n\t\t\t\t\t<E.Text>Or click the link to get started:</E.Text>\n\t\t\t\t</p>\n\t\t\t\t<E.Link href={onboardingUrl}>{onboardingUrl}</E.Link>\n\t\t\t</E.Container>\n\t\t</E.Html>;\n}\n_c = SignupEmail;\nexport const meta = () => {\n  return [{\n    title: 'Sign Up | Epic Notes'\n  }];\n};\nexport default function SignupRoute() {\n  _s();\n  const actionData = useActionData();\n  const isPending = useIsPending();\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get('redirectTo');\n  const [form, fields] = useForm({\n    id: 'signup-form',\n    constraint: getFieldsetConstraint(SignupSchema),\n    lastSubmission: actionData?.submission,\n    onValidate({\n      formData\n    }) {\n      const result = parse(formData, {\n        schema: SignupSchema\n      });\n      return result;\n    },\n    shouldRevalidate: 'onBlur'\n  });\n  return <div className=\"container flex flex-col justify-center pb-32 pt-20\">\n\t\t\t<div className=\"text-center\">\n\t\t\t\t<h1 className=\"text-h1\">Let's start your journey!</h1>\n\t\t\t\t<p className=\"mt-3 text-body-md text-muted-foreground\">\n\t\t\t\t\tPlease enter your email.\n\t\t\t\t</p>\n\t\t\t</div>\n\t\t\t<div className=\"mx-auto mt-16 min-w-full max-w-sm sm:min-w-[368px]\">\n\t\t\t\t<Form method=\"POST\" {...form.props}>\n\t\t\t\t\t<AuthenticityTokenInput />\n\t\t\t\t\t<HoneypotInputs />\n\t\t\t\t\t<Field labelProps={{\n          htmlFor: fields.email.id,\n          children: 'Email'\n        }} inputProps={{\n          ...conform.input(fields.email),\n          autoFocus: true\n        }} errors={fields.email.errors} />\n\t\t\t\t\t<ErrorList errors={form.errors} id={form.errorId} />\n\t\t\t\t\t<StatusButton className=\"w-full\" status={isPending ? 'pending' : actionData?.status ?? 'idle'} type=\"submit\" disabled={isPending}>\n\t\t\t\t\t\tSubmit\n\t\t\t\t\t</StatusButton>\n\t\t\t\t</Form>\n\t\t\t\t<ul className=\"mt-5 flex flex-col gap-5 border-b-2 border-t-2 border-border py-3\">\n\t\t\t\t\t{providerNames.map(providerName => <li key={providerName}>\n\t\t\t\t\t\t\t<ProviderConnectionForm type=\"Signup\" providerName={providerName} redirectTo={redirectTo} />\n\t\t\t\t\t\t</li>)}\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>;\n}\n_s(SignupRoute, \"pOytQzQfSlfERSUoCdV/IF0+RIo=\", false, function () {\n  return [useActionData, useIsPending, useSearchParams, useForm];\n});\n_c2 = SignupRoute;\nexport function ErrorBoundary() {\n  return <GeneralErrorBoundary />;\n}\n_c3 = ErrorBoundary;\nvar _c, _c2, _c3;\n$RefreshReg$(_c, \"SignupEmail\");\n$RefreshReg$(_c2, \"SignupRoute\");\n$RefreshReg$(_c3, \"ErrorBoundary\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": "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",
  "names": []
}
