{
  "version": 3,
  "sources": ["../../../../app/routes/_auth+/onboarding_.$provider.tsx"],
  "sourcesContent": ["// REMIX HMR BEGIN\nif (!window.$RefreshReg$ || !window.$RefreshSig$ || !window.$RefreshRuntime$) {\n  console.warn('remix:hmr: React Fast Refresh only works when the Remix compiler is running in development mode.');\n} else {\n  var prevRefreshReg = window.$RefreshReg$;\n  var prevRefreshSig = window.$RefreshSig$;\n  window.$RefreshReg$ = (type, id) => {\n    window.$RefreshRuntime$.register(type, \"\\\"app/routes/_auth+/onboarding_.$provider.tsx\\\"\" + id);\n  }\n  window.$RefreshSig$ = window.$RefreshRuntime$.createSignatureFunctionForTransform;\n}\nvar _s = $RefreshSig$();\nimport * as __hmr__ from \"remix:hmr\";\nif (import.meta) {\n  import.meta.hot = __hmr__.createHotContext(\n  //@ts-expect-error\n  \"app/routes/_auth+/onboarding_.$provider.tsx\");\n  import.meta.hot.lastModified = \"1706218436648.8835\";\n}\n// REMIX HMR END\n\nimport { conform, useForm } from '@conform-to/react';\nimport { getFieldsetConstraint, parse } from '@conform-to/zod';\nimport { json, redirect } from '@remix-run/node';\nimport { Form, useActionData, useLoaderData, useSearchParams } from '@remix-run/react';\nimport { safeRedirect } from 'remix-utils/safe-redirect';\nimport { z } from 'zod';\nimport { CheckboxField, ErrorList, Field } from '#app/components/forms.tsx';\nimport { Spacer } from '#app/components/spacer.tsx';\nimport { StatusButton } from '#app/components/ui/status-button.tsx';\nimport { authenticator, requireAnonymous, sessionKey, signupWithConnection } from '#app/utils/auth.server.ts';\nimport { ProviderNameSchema } from '#app/utils/connections.tsx';\nimport { prisma } from '#app/utils/db.server.ts';\nimport { invariant, useIsPending } from '#app/utils/misc.tsx';\nimport { authSessionStorage } from '#app/utils/session.server.ts';\nimport { redirectWithToast } from '#app/utils/toast.server.ts';\nimport { NameSchema, UsernameSchema } from '#app/utils/user-validation.ts';\nimport { verifySessionStorage } from '#app/utils/verification.server.ts';\nexport const onboardingEmailSessionKey = 'onboardingEmail';\nexport const providerIdKey = 'providerId';\nexport const prefilledProfileKey = 'prefilledProfile';\nconst SignupFormSchema = z.object({\n  imageUrl: z.string().optional(),\n  username: UsernameSchema,\n  name: NameSchema,\n  agreeToTermsOfServiceAndPrivacyPolicy: z.boolean({\n    required_error: 'You must agree to the terms of service and privacy policy'\n  }),\n  remember: z.boolean().optional(),\n  redirectTo: z.string().optional()\n});\nasync function requireData({\n  request,\n  params\n}) {\n  await requireAnonymous(request);\n  const verifySession = await verifySessionStorage.getSession(request.headers.get('cookie'));\n  const email = verifySession.get(onboardingEmailSessionKey);\n  const providerId = verifySession.get(providerIdKey);\n  const result = z.object({\n    email: z.string(),\n    providerName: ProviderNameSchema,\n    providerId: z.string()\n  }).safeParse({\n    email,\n    providerName: params.provider,\n    providerId\n  });\n  if (result.success) {\n    return result.data;\n  } else {\n    console.error(result.error);\n    throw redirect('/signup');\n  }\n}\nexport async function loader({\n  request,\n  params\n}) {\n  const {\n    email\n  } = await requireData({\n    request,\n    params\n  });\n  const authSession = await authSessionStorage.getSession(request.headers.get('cookie'));\n  const verifySession = await verifySessionStorage.getSession(request.headers.get('cookie'));\n  const prefilledProfile = verifySession.get(prefilledProfileKey);\n  const formError = authSession.get(authenticator.sessionErrorKey);\n  return json({\n    email,\n    status: 'idle',\n    submission: {\n      intent: '',\n      payload: prefilledProfile ?? {},\n      error: {\n        '': typeof formError === 'string' ? [formError] : []\n      }\n    }\n  });\n}\nexport async function action({\n  request,\n  params\n}) {\n  const {\n    email,\n    providerId,\n    providerName\n  } = await requireData({\n    request,\n    params\n  });\n  const formData = await request.formData();\n  const verifySession = await verifySessionStorage.getSession(request.headers.get('cookie'));\n  const submission = await parse(formData, {\n    schema: SignupFormSchema.superRefine(async (data, ctx) => {\n      const existingUser = await prisma.user.findUnique({\n        where: {\n          username: data.username\n        },\n        select: {\n          id: true\n        }\n      });\n      if (existingUser) {\n        ctx.addIssue({\n          path: ['username'],\n          code: z.ZodIssueCode.custom,\n          message: 'A user already exists with this username'\n        });\n        return;\n      }\n    }).transform(async data => {\n      const session = await signupWithConnection({\n        ...data,\n        email,\n        providerId,\n        providerName\n      });\n      return {\n        ...data,\n        session\n      };\n    }),\n    async: true\n  });\n  if (submission.intent !== 'submit') {\n    return json({\n      status: 'idle',\n      submission\n    });\n  }\n  if (!submission.value?.session) {\n    return json({\n      status: 'error',\n      submission\n    }, {\n      status: 400\n    });\n  }\n  const {\n    session,\n    remember,\n    redirectTo\n  } = submission.value;\n  const authSession = await authSessionStorage.getSession(request.headers.get('cookie'));\n  authSession.set(sessionKey, session.id);\n  const headers = new Headers();\n  headers.append('set-cookie', await authSessionStorage.commitSession(authSession, {\n    expires: remember ? session.expirationDate : undefined\n  }));\n  headers.append('set-cookie', await verifySessionStorage.destroySession(verifySession));\n  return redirectWithToast(safeRedirect(redirectTo), {\n    title: 'Welcome',\n    description: 'Thanks for signing up!'\n  }, {\n    headers\n  });\n}\nexport async function handleVerification({\n  submission\n}) {\n  invariant(submission.value, 'submission.value should be defined by now');\n  const verifySession = await verifySessionStorage.getSession();\n  verifySession.set(onboardingEmailSessionKey, submission.value.target);\n  return redirect('/onboarding', {\n    headers: {\n      'set-cookie': await verifySessionStorage.commitSession(verifySession)\n    }\n  });\n}\nexport const meta = () => {\n  return [{\n    title: 'Setup Epic Notes Account'\n  }];\n};\nexport default function SignupRoute() {\n  _s();\n  const data = useLoaderData();\n  const actionData = useActionData();\n  const isPending = useIsPending();\n  const [searchParams] = useSearchParams();\n  const redirectTo = searchParams.get('redirectTo');\n  const [form, fields] = useForm({\n    id: 'onboarding-provider-form',\n    constraint: getFieldsetConstraint(SignupFormSchema),\n    lastSubmission: actionData?.submission ?? data.submission,\n    onValidate({\n      formData\n    }) {\n      return parse(formData, {\n        schema: SignupFormSchema\n      });\n    },\n    shouldRevalidate: 'onBlur'\n  });\n  return <div className=\"container flex min-h-full flex-col justify-center pb-32 pt-20\">\n\t\t\t<div className=\"mx-auto w-full max-w-lg\">\n\t\t\t\t<div className=\"flex flex-col gap-3 text-center\">\n\t\t\t\t\t<h1 className=\"text-h1\">Welcome aboard {data.email}!</h1>\n\t\t\t\t\t<p className=\"text-body-md text-muted-foreground\">\n\t\t\t\t\t\tPlease enter your details.\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<Spacer size=\"xs\" />\n\t\t\t\t<Form method=\"POST\" className=\"mx-auto min-w-full max-w-sm sm:min-w-[368px]\" {...form.props}>\n\t\t\t\t\t{fields.imageUrl.defaultValue ? <div className=\"mb-4 flex flex-col items-center justify-center gap-4\">\n\t\t\t\t\t\t\t<img src={fields.imageUrl.defaultValue} alt=\"Profile\" className=\"h-24 w-24 rounded-full\" />\n\t\t\t\t\t\t\t<p className=\"text-body-sm text-muted-foreground\">\n\t\t\t\t\t\t\t\tYou can change your photo later\n\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t<input {...conform.input(fields.imageUrl, {\n            type: 'hidden'\n          })} />\n\t\t\t\t\t\t</div> : null}\n\t\t\t\t\t<Field labelProps={{\n          htmlFor: fields.username.id,\n          children: 'Username'\n        }} inputProps={{\n          ...conform.input(fields.username),\n          autoComplete: 'username',\n          className: 'lowercase'\n        }} errors={fields.username.errors} />\n\t\t\t\t\t<Field labelProps={{\n          htmlFor: fields.name.id,\n          children: 'Name'\n        }} inputProps={{\n          ...conform.input(fields.name),\n          autoComplete: 'name'\n        }} errors={fields.name.errors} />\n\n\t\t\t\t\t<CheckboxField labelProps={{\n          htmlFor: fields.agreeToTermsOfServiceAndPrivacyPolicy.id,\n          children: 'Do you agree to our Terms of Service and Privacy Policy?'\n        }} buttonProps={conform.input(fields.agreeToTermsOfServiceAndPrivacyPolicy, {\n          type: 'checkbox'\n        })} errors={fields.agreeToTermsOfServiceAndPrivacyPolicy.errors} />\n\t\t\t\t\t<CheckboxField labelProps={{\n          htmlFor: fields.remember.id,\n          children: 'Remember me'\n        }} buttonProps={conform.input(fields.remember, {\n          type: 'checkbox'\n        })} errors={fields.remember.errors} />\n\n\t\t\t\t\t{redirectTo ? <input type=\"hidden\" name=\"redirectTo\" value={redirectTo} /> : null}\n\n\t\t\t\t\t<ErrorList errors={form.errors} id={form.errorId} />\n\n\t\t\t\t\t<div className=\"flex items-center justify-between gap-6\">\n\t\t\t\t\t\t<StatusButton className=\"w-full\" status={isPending ? 'pending' : actionData?.status ?? 'idle'} type=\"submit\" disabled={isPending}>\n\t\t\t\t\t\t\tCreate an account\n\t\t\t\t\t\t</StatusButton>\n\t\t\t\t\t</div>\n\t\t\t\t</Form>\n\t\t\t</div>\n\t\t</div>;\n}\n_s(SignupRoute, \"SbEzVWUNyTwM/qcAIjF6pChQLW8=\", false, function () {\n  return [useLoaderData, useActionData, useIsPending, useSearchParams, useForm];\n});\n_c = SignupRoute;\nvar _c;\n$RefreshReg$(_c, \"SignupRoute\");\n\nwindow.$RefreshReg$ = prevRefreshReg;\nwindow.$RefreshSig$ = prevRefreshSig;"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,kBAA+B;AAO/B,yBAAkF;AAElF,uBAAuB;AAEvB,4BAAmC;AACnC,0BAAkC;AAElC,iCAAqC;AAuLhC;AA3NL,IAAI,CAAC,OAAO,gBAAgB,CAAC,OAAO,gBAAgB,CAAC,OAAO,kBAAkB;AAC5E,UAAQ,KAAK,kGAAkG;AACjH,OAAO;AACD,mBAAiB,OAAO;AACxB,mBAAiB,OAAO;AAC5B,SAAO,eAAe,CAAC,MAAM,OAAO;AAClC,WAAO,iBAAiB,SAAS,MAAM,kDAAoD,EAAE;AAAA,EAC/F;AACA,SAAO,eAAe,OAAO,iBAAiB;AAChD;AANM;AACA;AAMN,IAAI,KAAK,aAAa;AAEtB,IAAI,aAAa;AACf,cAAY,MAAc;AAAA;AAAA,IAE1B;AAAA,EAA6C;AAC7C,cAAY,IAAI,eAAe;AACjC;AAuBA,IAAM,mBAAmB,EAAE,OAAO;AAAA,EAChC,UAAU,EAAE,OAAO,EAAE,SAAS;AAAA,EAC9B,UAAU;AAAA,EACV,MAAM;AAAA,EACN,uCAAuC,EAAE,QAAQ;AAAA,IAC/C,gBAAgB;AAAA,EAClB,CAAC;AAAA,EACD,UAAU,EAAE,QAAQ,EAAE,SAAS;AAAA,EAC/B,YAAY,EAAE,OAAO,EAAE,SAAS;AAClC,CAAC;AA8IM,IAAM,OAAO,MAAM;AACxB,SAAO,CAAC;AAAA,IACN,OAAO;AAAA,EACT,CAAC;AACH;AACe,SAAR,cAA+B;AACpC,KAAG;AACH,QAAM,OAAO,cAAc;AAC3B,QAAM,aAAa,cAAc;AACjC,QAAM,YAAY,aAAa;AAC/B,QAAM,CAAC,YAAY,IAAI,gBAAgB;AACvC,QAAM,aAAa,aAAa,IAAI,YAAY;AAChD,QAAM,CAAC,MAAM,MAAM,IAAI,QAAQ;AAAA,IAC7B,IAAI;AAAA,IACJ,YAAY,cAAsB,gBAAgB;AAAA,IAClD,gBAAgB,YAAY,cAAc,KAAK;AAAA,IAC/C,WAAW;AAAA,MACT;AAAA,IACF,GAAG;AACD,aAAO,MAAM,UAAU;AAAA,QACrB,QAAQ;AAAA,MACV,CAAC;AAAA,IACH;AAAA,IACA,kBAAkB;AAAA,EACpB,CAAC;AACD,SAAO,mDAAC,SAAI,WAAU,iEACrB,6DAAC,SAAI,WAAU,2BACd;AAAA,uDAAC,SAAI,WAAU,mCACd;AAAA,yDAAC,QAAG,WAAU,WAAU;AAAA;AAAA,QAAgB,KAAK;AAAA,QAAM;AAAA,WAAnD;AAAA;AAAA;AAAA;AAAA,aAAoD;AAAA,MACpD,mDAAC,OAAE,WAAU,sCAAqC,0CAAlD;AAAA;AAAA;AAAA;AAAA,aAEA;AAAA,SAJD;AAAA;AAAA;AAAA;AAAA,WAKA;AAAA,IACA,mDAAC,UAAO,MAAK,QAAb;AAAA;AAAA;AAAA;AAAA,WAAkB;AAAA,IAClB,mDAAC,QAAK,QAAO,QAAO,WAAU,gDAAgD,GAAG,KAAK,OACpF;AAAA,aAAO,SAAS,eAAe,mDAAC,SAAI,WAAU,wDAC7C;AAAA,2DAAC,SAAI,KAAK,OAAO,SAAS,cAAc,KAAI,WAAU,WAAU,4BAAhE;AAAA;AAAA;AAAA;AAAA,eAAyF;AAAA,QACzF,mDAAC,OAAE,WAAU,sCAAqC,+CAAlD;AAAA;AAAA;AAAA;AAAA,eAEA;AAAA,QACA,mDAAC,WAAO,GAAG,gBAAQ,MAAM,OAAO,UAAU;AAAA,UACrC,MAAM;AAAA,QACR,CAAC,KAFJ;AAAA;AAAA;AAAA;AAAA,eAEO;AAAA,WAPuB;AAAA;AAAA;AAAA;AAAA,aAQ/B,IAAS;AAAA,MACV,mDAAC,SAAM,YAAY;AAAA,QACd,SAAS,OAAO,SAAS;AAAA,QACzB,UAAU;AAAA,MACZ,GAAG,YAAY;AAAA,QACb,GAAG,gBAAQ,MAAM,OAAO,QAAQ;AAAA,QAChC,cAAc;AAAA,QACd,WAAW;AAAA,MACb,GAAG,QAAQ,OAAO,SAAS,UAP9B;AAAA;AAAA;AAAA;AAAA,aAOsC;AAAA,MACtC,mDAAC,SAAM,YAAY;AAAA,QACd,SAAS,OAAO,KAAK;AAAA,QACrB,UAAU;AAAA,MACZ,GAAG,YAAY;AAAA,QACb,GAAG,gBAAQ,MAAM,OAAO,IAAI;AAAA,QAC5B,cAAc;AAAA,MAChB,GAAG,QAAQ,OAAO,KAAK,UAN1B;AAAA;AAAA;AAAA;AAAA,aAMkC;AAAA,MAElC,mDAAC,iBAAc,YAAY;AAAA,QACtB,SAAS,OAAO,sCAAsC;AAAA,QACtD,UAAU;AAAA,MACZ,GAAG,aAAa,gBAAQ,MAAM,OAAO,uCAAuC;AAAA,QAC1E,MAAM;AAAA,MACR,CAAC,GAAG,QAAQ,OAAO,sCAAsC,UAL5D;AAAA;AAAA;AAAA;AAAA,aAKoE;AAAA,MACpE,mDAAC,iBAAc,YAAY;AAAA,QACtB,SAAS,OAAO,SAAS;AAAA,QACzB,UAAU;AAAA,MACZ,GAAG,aAAa,gBAAQ,MAAM,OAAO,UAAU;AAAA,QAC7C,MAAM;AAAA,MACR,CAAC,GAAG,QAAQ,OAAO,SAAS,UAL/B;AAAA;AAAA;AAAA;AAAA,aAKuC;AAAA,MAEtC,aAAa,mDAAC,WAAM,MAAK,UAAS,MAAK,cAAa,OAAO,cAA9C;AAAA;AAAA;AAAA;AAAA,aAA0D,IAAK;AAAA,MAE7E,mDAAC,aAAU,QAAQ,KAAK,QAAQ,IAAI,KAAK,WAAzC;AAAA;AAAA;AAAA;AAAA,aAAkD;AAAA,MAElD,mDAAC,SAAI,WAAU,2CACd,6DAAC,gBAAa,WAAU,UAAS,QAAQ,YAAY,YAAY,YAAY,UAAU,QAAQ,MAAK,UAAS,UAAU,WAAW,iCAAlI;AAAA;AAAA;AAAA;AAAA,aAEA,KAHD;AAAA;AAAA;AAAA;AAAA,aAIA;AAAA,SA/CD;AAAA;AAAA;AAAA;AAAA,WAgDA;AAAA,OAxDD;AAAA;AAAA;AAAA;AAAA,SAyDA,KA1DM;AAAA;AAAA;AAAA;AAAA,SA2DP;AACF;AACA,GAAG,aAAa,gCAAgC,OAAO,WAAY;AACjE,SAAO,CAAC,eAAe,eAAe,cAAc,iBAAiB,OAAO;AAC9E,CAAC;AACD,KAAK;AACL,IAAI;AACJ,aAAa,IAAI,aAAa;AAE9B,OAAO,eAAe;AACtB,OAAO,eAAe;",
  "names": []
}
